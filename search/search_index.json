{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ATOM What is ATOM? Calibration Pipeline Robotic System Configuration Data Logging Initial Positioning of Sensors Data Collection and Labeling Dataset playback Calibration Calibration Evaluation Running the calibrated system What is a collection? What is an ATOM Dataset? What is ATOM? ATOM is a calibration framework using the A tomic T ransformations O ptimization M ethod. https://github.com/lardemua/atom It contains a set of calibration tools for multi-sensor, multi-modal, robotic systems, based on the optimization of atomic transformations, as provided by a ROS based robot description. Moreover, it provides several scripts to facilitate all the steps of a calibration procedure. If this work is helpful for you please cite our publications . Calibration Pipeline In order to calibrate a robotic system one needs to carry out several tasks, such as acquiring data, labeling data, executing the calibration, interpreting the result of the calibration, etc. ATOM provides several scripts to address all the stages of a calibration procedure. These scripts are seamlessly integrated into ROS , and makes use of RViz to provide extensive visualization in severall stages of the calibration procedure. We have divided the calibration procedure into several stages, shown in the scheme below. ATOM calibration pipeline. The greyed out boxes are steps considered to be out of the scope of ATOM, i.e., these are tasks one should do in order to configure a robot system in ROS. Dashed line boxes represent steps which are optional. They may be skipped if there is confidence that they are not required. Below we describe each of these stages, giving examples for the MMTBot . Robotic System Configuration Robotic System Configuration concerns the design and implementation of your robotic system in ROS. It generally involves the writting of an UDRF or a xacro file that describes the links and joints of your robotic system. It sometimes also includes de configuration of a simulation of your system in Gazebo . Tipically one creates a couple of ros packages for our robot, as described below. <my_robot>_description ros package contains the xacro files that describe your robot. It sometimes also contains cad models inside a models folder. An example from MMTBot is here . <my_robot>_bringup ros package contains the launch files used to bringup your robotic system. Tipically there is a bringup.launch that starts the complete system. An example from the MMTBot . Data Logging Data Logging is the procedure by which a ros bagfile is recorded to be used in the calibration later on. You may record data by calling rosbag record directly, e.g.: rosbag record /topic1 ... /topicN -o output.bag We tipically have a roslaunch file to record data and produce a bagfile for each robotic system. Here's the example for MMTBot . A bagfile should contain several topics, namely transformations and joint state messages, as well as messages produced by the sensors in the system. For example, in the case of MMTBot, which has sensors world_camera , hand_camera and lidar , we record the following topics: /tf /tf_static /joint_states /world_camera/rgb/image_raw/compressed /world_camera/rgb/camera_info /hand_camera/rgb/image_raw/compressed /hand_camera/rgb/camera_info /lidar/points Initial Positioning of Sensors The goal of this stage is to allow the user to define interactively the poses of each sensor, so that the optimization starts close to the optimal solution and thus avoids local minima. This stage may be skiped in the transformations from the URDF are believed to be \"more or less\" accurate. More details here . Data Collection and Labeling This stage reads the bagfile and allows the user to assist the labeling procedure, i.e., the identification of the calibration pattern in the data of the sensors, and then to decide when to save each collection. The output is an ATOM dataset . More details here . Dataset playback This stage is used to review ATOM datasets. The reviewing may identify incorrect labels, which can be corrected through manual annotation. It produces a corrected ATOM dataset . More details here . Calibration This is were finally the system is calibrated. ATOM provides extensive visualization funcionalities so that it is possible to observe how the calibration is performing. More details here . Calibration Evaluation ATOM provides several scripts designed to measure the accuracy of the calibration. These tools are pairwise evaluations, which means it is possible to compare the accuracy of ATOM with other state of the art pairwise approaches. More details here . Running the calibrated system After calibration ATOM produces a calibrated URDF file which can be direcly used in ROS. If you get here unscathed you are a very lucky person ... Enjoy! What is a collection? A collection is a recording of the data from all the sensors in the system at a particular time instant selected by the user. Collections also contain information about labels for the sensor data, as well as the state of the robotic system at that time, i.e., all the transformations. What is an ATOM Dataset? An ATOM dataset is a folder which contains data used for the calibration of a robotic system. Every ATOM dataset contains a dataset.json which provides details about the dataset, such as the defined configuration, the number of sensors, etc. Several scripts in the calibration pipeline require an ATOM dataset, but is worth mentioning that the files are also human readable. Below you can see the structure of an ATOM dataset. Structure of an ATOM dataset json file. A dataset.json file contains a _metadata field, where details about the date, user and others are stored. It also contains a calibration_config , which is a copy of the state of the configuration file at the time of creation of the dataset. The sensors field describes each of the sensors in the system, in particular those selected to be calibrated. Finally, the collections field contains several collections, i.e. snapshots of data. Each collection contains a subfield data , that stores a dictionary obtained through the conversion of the ROS message to a python dictionary , the subfield labels contains information about annotations (automatic or manual) of each sensor data, and the subfield transforms contains all the transformations published at (or near) the time of the collection. In addition to the dataset.json file, ATOM datasets also contain dedicated files for larger data blobs, such as point clouds or images are saved separately in the same folder. Because the transformations are stored for each collection, it is possible recover the complete state of the robotic system at the time of each collection. Below we view the different poses of the manipulator and the calibration pattern for each collection. Several collections in an MMTBot dataset.","title":"Introduction"},{"location":"#atom","text":"What is ATOM? Calibration Pipeline Robotic System Configuration Data Logging Initial Positioning of Sensors Data Collection and Labeling Dataset playback Calibration Calibration Evaluation Running the calibrated system What is a collection? What is an ATOM Dataset?","title":"ATOM"},{"location":"#what-is-atom","text":"ATOM is a calibration framework using the A tomic T ransformations O ptimization M ethod. https://github.com/lardemua/atom It contains a set of calibration tools for multi-sensor, multi-modal, robotic systems, based on the optimization of atomic transformations, as provided by a ROS based robot description. Moreover, it provides several scripts to facilitate all the steps of a calibration procedure. If this work is helpful for you please cite our publications .","title":"What is ATOM?"},{"location":"#calibration-pipeline","text":"In order to calibrate a robotic system one needs to carry out several tasks, such as acquiring data, labeling data, executing the calibration, interpreting the result of the calibration, etc. ATOM provides several scripts to address all the stages of a calibration procedure. These scripts are seamlessly integrated into ROS , and makes use of RViz to provide extensive visualization in severall stages of the calibration procedure. We have divided the calibration procedure into several stages, shown in the scheme below. ATOM calibration pipeline. The greyed out boxes are steps considered to be out of the scope of ATOM, i.e., these are tasks one should do in order to configure a robot system in ROS. Dashed line boxes represent steps which are optional. They may be skipped if there is confidence that they are not required. Below we describe each of these stages, giving examples for the MMTBot .","title":"Calibration Pipeline"},{"location":"#robotic-system-configuration","text":"Robotic System Configuration concerns the design and implementation of your robotic system in ROS. It generally involves the writting of an UDRF or a xacro file that describes the links and joints of your robotic system. It sometimes also includes de configuration of a simulation of your system in Gazebo . Tipically one creates a couple of ros packages for our robot, as described below. <my_robot>_description ros package contains the xacro files that describe your robot. It sometimes also contains cad models inside a models folder. An example from MMTBot is here . <my_robot>_bringup ros package contains the launch files used to bringup your robotic system. Tipically there is a bringup.launch that starts the complete system. An example from the MMTBot .","title":"Robotic System Configuration"},{"location":"#data-logging","text":"Data Logging is the procedure by which a ros bagfile is recorded to be used in the calibration later on. You may record data by calling rosbag record directly, e.g.: rosbag record /topic1 ... /topicN -o output.bag We tipically have a roslaunch file to record data and produce a bagfile for each robotic system. Here's the example for MMTBot . A bagfile should contain several topics, namely transformations and joint state messages, as well as messages produced by the sensors in the system. For example, in the case of MMTBot, which has sensors world_camera , hand_camera and lidar , we record the following topics: /tf /tf_static /joint_states /world_camera/rgb/image_raw/compressed /world_camera/rgb/camera_info /hand_camera/rgb/image_raw/compressed /hand_camera/rgb/camera_info /lidar/points","title":"Data Logging"},{"location":"#initial-positioning-of-sensors","text":"The goal of this stage is to allow the user to define interactively the poses of each sensor, so that the optimization starts close to the optimal solution and thus avoids local minima. This stage may be skiped in the transformations from the URDF are believed to be \"more or less\" accurate. More details here .","title":"Initial Positioning of Sensors"},{"location":"#data-collection-and-labeling","text":"This stage reads the bagfile and allows the user to assist the labeling procedure, i.e., the identification of the calibration pattern in the data of the sensors, and then to decide when to save each collection. The output is an ATOM dataset . More details here .","title":"Data Collection and Labeling"},{"location":"#dataset-playback","text":"This stage is used to review ATOM datasets. The reviewing may identify incorrect labels, which can be corrected through manual annotation. It produces a corrected ATOM dataset . More details here .","title":"Dataset playback"},{"location":"#calibration","text":"This is were finally the system is calibrated. ATOM provides extensive visualization funcionalities so that it is possible to observe how the calibration is performing. More details here .","title":"Calibration"},{"location":"#calibration-evaluation","text":"ATOM provides several scripts designed to measure the accuracy of the calibration. These tools are pairwise evaluations, which means it is possible to compare the accuracy of ATOM with other state of the art pairwise approaches. More details here .","title":"Calibration Evaluation"},{"location":"#running-the-calibrated-system","text":"After calibration ATOM produces a calibrated URDF file which can be direcly used in ROS. If you get here unscathed you are a very lucky person ... Enjoy!","title":"Running the calibrated system"},{"location":"#what-is-a-collection","text":"A collection is a recording of the data from all the sensors in the system at a particular time instant selected by the user. Collections also contain information about labels for the sensor data, as well as the state of the robotic system at that time, i.e., all the transformations.","title":"What is a collection?"},{"location":"#what-is-an-atom-dataset","text":"An ATOM dataset is a folder which contains data used for the calibration of a robotic system. Every ATOM dataset contains a dataset.json which provides details about the dataset, such as the defined configuration, the number of sensors, etc. Several scripts in the calibration pipeline require an ATOM dataset, but is worth mentioning that the files are also human readable. Below you can see the structure of an ATOM dataset. Structure of an ATOM dataset json file. A dataset.json file contains a _metadata field, where details about the date, user and others are stored. It also contains a calibration_config , which is a copy of the state of the configuration file at the time of creation of the dataset. The sensors field describes each of the sensors in the system, in particular those selected to be calibrated. Finally, the collections field contains several collections, i.e. snapshots of data. Each collection contains a subfield data , that stores a dictionary obtained through the conversion of the ROS message to a python dictionary , the subfield labels contains information about annotations (automatic or manual) of each sensor data, and the subfield transforms contains all the transformations published at (or near) the time of the collection. In addition to the dataset.json file, ATOM datasets also contain dedicated files for larger data blobs, such as point clouds or images are saved separately in the same folder. Because the transformations are stored for each collection, it is possible recover the complete state of the robotic system at the time of each collection. Below we view the different poses of the manipulator and the calibration pattern for each collection. Several collections in an MMTBot dataset.","title":"What is an ATOM Dataset?"},{"location":"acknowledgment/","text":"Acknowledgements Citing ATOM Contributors Current Maintainers Citing ATOM Pedrosa, E., M. Oliveira, N. Lau, and V. Santos, A General Approach to Hand\u2013Eye Calibration Through the Optimization of Atomic Transformations, IEEE Transactions on Robotics (2021) pp. 1\u201315, DOI: https://doi.org/10.1109/TRO.2021.3062306 , 2021. Bibtex . Aguiar, A., M. Oliveira, E. Pedrosa, and F. Santos, A Camera to LiDAR calibration approach through the Optimization of Atomic Transformations, Expert Systems with Applications (2021) p. 114894, ISSN: 0957-4174, DOI: https://doi.org/10.1016/j.eswa.2021.114894 , 2021. Bibtex . Oliveira, M., A. Castro, T. Madeira, E. Pedrosa, P. Dias, and V. Santos, A ROS framework for the extrinsic calibration of intelligent vehicles: A multi-sensor, multi-modal approach, Robotics and Autonomous Systems (2020) p. 103558, ISSN: 0921-8890, DOI: https://doi.org/10.1016/j.robot.2020.103558 , 2020. Bibtex . Oliveira, M., Castro, A., Madeira, T., Dias, P., & Santos, V.M. (2019). A General Approach to the Extrinsic Calibration of Intelligent Vehicles Using ROS. ROBOT. bibtex Contributors Miguel Riem Oliveira - University of Aveiro Afonso Castro - University of Aveiro Eurico Pedrosa - University of Aveiro Tiago Madeira - University of Aveiro Andr\u00e9 Aguiar - INESC TEC Daniela Rato - University of Aveiro Current Maintainers Miguel Riem Oliveira - University of Aveiro Daniela Rato - University of Aveiro Manuel Gomes - University of Aveiro","title":"Acknowledgment"},{"location":"acknowledgment/#acknowledgements","text":"Citing ATOM Contributors Current Maintainers","title":"Acknowledgements"},{"location":"acknowledgment/#citing-atom","text":"Pedrosa, E., M. Oliveira, N. Lau, and V. Santos, A General Approach to Hand\u2013Eye Calibration Through the Optimization of Atomic Transformations, IEEE Transactions on Robotics (2021) pp. 1\u201315, DOI: https://doi.org/10.1109/TRO.2021.3062306 , 2021. Bibtex . Aguiar, A., M. Oliveira, E. Pedrosa, and F. Santos, A Camera to LiDAR calibration approach through the Optimization of Atomic Transformations, Expert Systems with Applications (2021) p. 114894, ISSN: 0957-4174, DOI: https://doi.org/10.1016/j.eswa.2021.114894 , 2021. Bibtex . Oliveira, M., A. Castro, T. Madeira, E. Pedrosa, P. Dias, and V. Santos, A ROS framework for the extrinsic calibration of intelligent vehicles: A multi-sensor, multi-modal approach, Robotics and Autonomous Systems (2020) p. 103558, ISSN: 0921-8890, DOI: https://doi.org/10.1016/j.robot.2020.103558 , 2020. Bibtex . Oliveira, M., Castro, A., Madeira, T., Dias, P., & Santos, V.M. (2019). A General Approach to the Extrinsic Calibration of Intelligent Vehicles Using ROS. ROBOT. bibtex","title":"Citing ATOM"},{"location":"acknowledgment/#contributors","text":"Miguel Riem Oliveira - University of Aveiro Afonso Castro - University of Aveiro Eurico Pedrosa - University of Aveiro Tiago Madeira - University of Aveiro Andr\u00e9 Aguiar - INESC TEC Daniela Rato - University of Aveiro","title":"Contributors"},{"location":"acknowledgment/#current-maintainers","text":"Miguel Riem Oliveira - University of Aveiro Daniela Rato - University of Aveiro Manuel Gomes - University of Aveiro","title":"Current Maintainers"},{"location":"evaluations/","text":"Evaluating your calibration Annotation of rgb images RGB to RGB camera evaluation LiDAR to Depth Camera evaluation RGB to Depth camera evaluation LiDAR to LiDAR evaluation LiDAR to RGB camera evaluation Point cloud image projection After the system is calibrated one common concern is to be able to assess the accuracy of the produced calibration. ATOM provides several evaluation scripts for this purpose. Unlike ATOM which calibrates all sensors simultaneously, evaluations are performed in pairs of sensors, which facilitates comparisons with other calibration approaches (which are mostly pairwise), e.g. opencv's stereo calibration . Thus, there is a different evaluation script for each combination of modalities. Annotation of rgb images To evaluate calibration between range sensors and cameras, it is necessary to annotate the physical limits on the calibration pattern in the images of the collection, to allow a comparison with physical labelings as measured by range sensors . rosrun atom_evaluation annotate_pattern_borders_in_rgb.py [-h] -d DATASET_FILE -cs CAMERA_SENSOR [-si] [-ww WINDOW_WIDTH] [-ps POINT_SIZE] [-ppp POINTS_PER_PIXEL] optional arguments: -h, --help show this help message and exit -d DATASET_FILE, --dataset_file DATASET_FILE Json file containing input dataset. -cs CAMERA_SENSOR, --camera_sensor CAMERA_SENSOR Source transformation sensor. -si, --show_images If true the script shows images. -ww WINDOW_WIDTH, --window_width WINDOW_WIDTH Width of the window. -ps POINT_SIZE, --point_size POINT_SIZE Size of points to draw on image. -ppp POINTS_PER_PIXEL, --points_per_pixel POINTS_PER_PIXEL How many points per pixel to sample between annotated points. Note: you must annotate each camera sensor present in your calibration system. These annotation will be used to evaluate both the lidar-camera pairs and depth-camera. How to annotate: click to add points in the currently selected pattern side (text in top left corner) if the pattern limit is viewed as a straight line in the image you may click only the corners, if needed you can click more points once a side is complete, move on to the n ext side by pressing \"n\" when the four sides are complete move to the next collection image by pressing \".\" The complete list of keys is printed when \"h\" is pressed. Be sure to label the corners in both intersected edges, ie, each corner should have two different coloured points. The result should be someting like this (for each image): Here is a video tutorial . RGB to RGB camera evaluation Evaluates de camera-to-camera reprojection error with the following metrics: X and Y errors Root mean squared error Translation and rotation errors usage: rgb_to_rgb_evaluation [-h] -train_json TRAIN_JSON_FILE -test_json TEST_JSON_FILE -ss SENSOR_SOURCE -st SENSOR_TARGET [-si] [-sg] optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing train input dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing test input dataset. -ss SENSOR_SOURCE, --sensor_source SENSOR_SOURCE Source transformation sensor. -st SENSOR_TARGET, --sensor_target SENSOR_TARGET Target transformation sensor. -si, --show_images If true the script shows images. -sg, --save_graphics Save reprojection error graphics. How to run: rosrun atom_evaluation rgb_to_rgb_evalutation.py -train_json <path_to_train_file> -test_json <path_to_test_file> -ss <source_sensor_name> -ts <target_sensor_name> LiDAR to Depth Camera evaluation How to run: rosrun atom_evaluation lidar_to_depth_evaluation.py -train_json <path_to_train_file> -test_json <path_to_test_file> -cs <camera_sensor_name> -rs <lidar_sensor_name> -si optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing train input dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing test input dataset. -ld SOURCE_SENSOR, --lidar_sensor SOURCE_SENSOR Source transformation sensor. -ds TARGET_SENSOR, --depth_sensor TARGET_SENSOR Target transformation sensor. -si, --show_images If true the script shows images. RGB to Depth camera evaluation How to run: rosrun atom_evaluation depth_sensor_to_camera_evaluation.py -train_json <path_to_train_file> -test_json <path_to_test_file> -cs <camera_sensor_name> -ds <depth_sensor_name> optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing train input dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing test input dataset. -cs SOURCE_SENSOR, --camera_sensor SOURCE_SENSOR Source transformation sensor. -ds TARGET_SENSOR, --depth_sensor TARGET_SENSOR Target transformation sensor. -si, --show_images If true the script shows images. LiDAR to LiDAR evaluation How to run: rosrun atom_evaluation lidar_to_lidar.py -train_json <path_to_train_file> -test_json <path_to_test_file> -ld1 <source_lidar_sensor_name> -ld2 <target_lidar_sensor_name> optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing train input dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing test input dataset. -ld1 SOURCE_SENSOR, --lidar_sensor_1 SOURCE_SENSOR Source transformation sensor. -ld2 TARGET_SENSOR, --lidar_sensor_2 TARGET_SENSOR Target transformation sensor. LiDAR to RGB camera evaluation Evaluates the LiDAR-to-Camera calibration through the reprojection of the pattern limit 3D points into the image using the following metrics: X and Y errors Root mean squared error This process requires the annotation of the pattern limit points in the image. After annotating once, if the user wish to repeat the process, the saved json file with the annotations can be loaded. For that the -ua flag has to be disabled. usage: range_sensor_to_camera_evaluation.py [-h] -train_json TRAIN_JSON_FILE -test_json TEST_JSON_FILE -ss SOURCE_SENSOR -ts TARGET_SENSOR [-si] -ef EVAL_FILE [-ua] optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing input training dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing input testing dataset. -ss SOURCE_SENSOR, --source_sensor SOURCE_SENSOR Source transformation sensor. -ts TARGET_SENSOR, --target_sensor TARGET_SENSOR Target transformation sensor. -si, --show_images If true the script shows images. -ef EVAL_FILE, --eval_file EVAL_FILE Path to file to read and/or write the evalutation data. -ua, --use_annotation If true, the limit points will be manually annotated. Point cloud image projection atom_evaluation also allows the user to visualize the point cloud projected into an image to check the calibration. usage: point_cloud_to_image.py [-h] -json JSON_FILE -ls LIDAR_SENSOR -cs CAMERA_SENSOR optional arguments: -h, --help show this help message and exit -json JSON_FILE, --json_file JSON_FILE Json file containing input dataset. -ls LIDAR_SENSOR, --lidar_sensor LIDAR_SENSOR LiDAR sensor name. -cs CAMERA_SENSOR, --camera_sensor CAMERA_SENSOR Camera sensor name. How to run: rosrun atom_evaluation point_cloud_to_image.py -json <path_to_test_json> -ls <lidar_sensor_name> -cs <camera_sensor_name>","title":"Evaluation Procedures"},{"location":"evaluations/#evaluating-your-calibration","text":"Annotation of rgb images RGB to RGB camera evaluation LiDAR to Depth Camera evaluation RGB to Depth camera evaluation LiDAR to LiDAR evaluation LiDAR to RGB camera evaluation Point cloud image projection After the system is calibrated one common concern is to be able to assess the accuracy of the produced calibration. ATOM provides several evaluation scripts for this purpose. Unlike ATOM which calibrates all sensors simultaneously, evaluations are performed in pairs of sensors, which facilitates comparisons with other calibration approaches (which are mostly pairwise), e.g. opencv's stereo calibration . Thus, there is a different evaluation script for each combination of modalities.","title":"Evaluating your calibration"},{"location":"evaluations/#annotation-of-rgb-images","text":"To evaluate calibration between range sensors and cameras, it is necessary to annotate the physical limits on the calibration pattern in the images of the collection, to allow a comparison with physical labelings as measured by range sensors . rosrun atom_evaluation annotate_pattern_borders_in_rgb.py [-h] -d DATASET_FILE -cs CAMERA_SENSOR [-si] [-ww WINDOW_WIDTH] [-ps POINT_SIZE] [-ppp POINTS_PER_PIXEL] optional arguments: -h, --help show this help message and exit -d DATASET_FILE, --dataset_file DATASET_FILE Json file containing input dataset. -cs CAMERA_SENSOR, --camera_sensor CAMERA_SENSOR Source transformation sensor. -si, --show_images If true the script shows images. -ww WINDOW_WIDTH, --window_width WINDOW_WIDTH Width of the window. -ps POINT_SIZE, --point_size POINT_SIZE Size of points to draw on image. -ppp POINTS_PER_PIXEL, --points_per_pixel POINTS_PER_PIXEL How many points per pixel to sample between annotated points. Note: you must annotate each camera sensor present in your calibration system. These annotation will be used to evaluate both the lidar-camera pairs and depth-camera. How to annotate: click to add points in the currently selected pattern side (text in top left corner) if the pattern limit is viewed as a straight line in the image you may click only the corners, if needed you can click more points once a side is complete, move on to the n ext side by pressing \"n\" when the four sides are complete move to the next collection image by pressing \".\" The complete list of keys is printed when \"h\" is pressed. Be sure to label the corners in both intersected edges, ie, each corner should have two different coloured points. The result should be someting like this (for each image): Here is a video tutorial .","title":"Annotation of rgb images"},{"location":"evaluations/#rgb-to-rgb-camera-evaluation","text":"Evaluates de camera-to-camera reprojection error with the following metrics: X and Y errors Root mean squared error Translation and rotation errors usage: rgb_to_rgb_evaluation [-h] -train_json TRAIN_JSON_FILE -test_json TEST_JSON_FILE -ss SENSOR_SOURCE -st SENSOR_TARGET [-si] [-sg] optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing train input dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing test input dataset. -ss SENSOR_SOURCE, --sensor_source SENSOR_SOURCE Source transformation sensor. -st SENSOR_TARGET, --sensor_target SENSOR_TARGET Target transformation sensor. -si, --show_images If true the script shows images. -sg, --save_graphics Save reprojection error graphics. How to run: rosrun atom_evaluation rgb_to_rgb_evalutation.py -train_json <path_to_train_file> -test_json <path_to_test_file> -ss <source_sensor_name> -ts <target_sensor_name>","title":"RGB to RGB camera evaluation"},{"location":"evaluations/#lidar-to-depth-camera-evaluation","text":"How to run: rosrun atom_evaluation lidar_to_depth_evaluation.py -train_json <path_to_train_file> -test_json <path_to_test_file> -cs <camera_sensor_name> -rs <lidar_sensor_name> -si optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing train input dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing test input dataset. -ld SOURCE_SENSOR, --lidar_sensor SOURCE_SENSOR Source transformation sensor. -ds TARGET_SENSOR, --depth_sensor TARGET_SENSOR Target transformation sensor. -si, --show_images If true the script shows images.","title":"LiDAR to Depth Camera evaluation"},{"location":"evaluations/#rgb-to-depth-camera-evaluation","text":"How to run: rosrun atom_evaluation depth_sensor_to_camera_evaluation.py -train_json <path_to_train_file> -test_json <path_to_test_file> -cs <camera_sensor_name> -ds <depth_sensor_name> optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing train input dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing test input dataset. -cs SOURCE_SENSOR, --camera_sensor SOURCE_SENSOR Source transformation sensor. -ds TARGET_SENSOR, --depth_sensor TARGET_SENSOR Target transformation sensor. -si, --show_images If true the script shows images.","title":"RGB to Depth camera evaluation"},{"location":"evaluations/#lidar-to-lidar-evaluation","text":"How to run: rosrun atom_evaluation lidar_to_lidar.py -train_json <path_to_train_file> -test_json <path_to_test_file> -ld1 <source_lidar_sensor_name> -ld2 <target_lidar_sensor_name> optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing train input dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing test input dataset. -ld1 SOURCE_SENSOR, --lidar_sensor_1 SOURCE_SENSOR Source transformation sensor. -ld2 TARGET_SENSOR, --lidar_sensor_2 TARGET_SENSOR Target transformation sensor.","title":"LiDAR to LiDAR evaluation"},{"location":"evaluations/#lidar-to-rgb-camera-evaluation","text":"Evaluates the LiDAR-to-Camera calibration through the reprojection of the pattern limit 3D points into the image using the following metrics: X and Y errors Root mean squared error This process requires the annotation of the pattern limit points in the image. After annotating once, if the user wish to repeat the process, the saved json file with the annotations can be loaded. For that the -ua flag has to be disabled. usage: range_sensor_to_camera_evaluation.py [-h] -train_json TRAIN_JSON_FILE -test_json TEST_JSON_FILE -ss SOURCE_SENSOR -ts TARGET_SENSOR [-si] -ef EVAL_FILE [-ua] optional arguments: -h, --help show this help message and exit -train_json TRAIN_JSON_FILE, --train_json_file TRAIN_JSON_FILE Json file containing input training dataset. -test_json TEST_JSON_FILE, --test_json_file TEST_JSON_FILE Json file containing input testing dataset. -ss SOURCE_SENSOR, --source_sensor SOURCE_SENSOR Source transformation sensor. -ts TARGET_SENSOR, --target_sensor TARGET_SENSOR Target transformation sensor. -si, --show_images If true the script shows images. -ef EVAL_FILE, --eval_file EVAL_FILE Path to file to read and/or write the evalutation data. -ua, --use_annotation If true, the limit points will be manually annotated.","title":"LiDAR to RGB camera evaluation"},{"location":"evaluations/#point-cloud-image-projection","text":"atom_evaluation also allows the user to visualize the point cloud projected into an image to check the calibration. usage: point_cloud_to_image.py [-h] -json JSON_FILE -ls LIDAR_SENSOR -cs CAMERA_SENSOR optional arguments: -h, --help show this help message and exit -json JSON_FILE, --json_file JSON_FILE Json file containing input dataset. -ls LIDAR_SENSOR, --lidar_sensor LIDAR_SENSOR LiDAR sensor name. -cs CAMERA_SENSOR, --camera_sensor CAMERA_SENSOR Camera sensor name. How to run: rosrun atom_evaluation point_cloud_to_image.py -json <path_to_test_json> -ls <lidar_sensor_name> -cs <camera_sensor_name>","title":"Point cloud image projection"},{"location":"examples/","text":"Calibration Examples MMTBot Atlascar2 IrisUA - ur10e AgrobV2 LARCC ATOM provides extensive visualization possibilities while running the calibration optimization procedure. To visualize in ROS Rviz use the -rv flag. So far, we have used ATOM to successfully calibrate several robotic platforms. Here are some examples: MMTBot MMTBot is a simulated robotic system containing a manipulator, two rgb cameras and one 3D lidar, with the goal of reserching how ATOM can calibration hand-eye systems. The respositories for this system are here: https://github.com/miguelriemoliveira/mmtbot A 3D Model of the MMTBot. Atlascar2 The Atlascar2 is an intelligent vehicle containing several cameras and 2D Lidars. This was the first platform we have calibrated using ATOM. The repositories containing the atlascar packages are here: https://github.com/lardemua/atlascar2 A photograph of the AtlasCar2. A 3D model of the AtlasCar2. Further details on this system can be read in the papers published in ROBOT 2019 and RAS 2020 . IrisUA - ur10e The IrisUA - ur10e includes several variants of the hand-eye calibration problem. The repositories containing the calibration ros package for this system are here: https://github.com/iris-ua/iris_ur10e_calibration A photograph of the IRIS UA UR10e. A 3D Model of the IRIS UA UR10e. Further details on this system can be read in the paper published in T-Ro 2021 . AgrobV2 AgrobV2 is a mobile robot with a stereo camera and a 3D Lidar designed for agriculture robotics. https://github.com/aaguiar96/agrob A photograph of the AgrobV2. A 3D Model of the AgrobV2. Further details on this system can be read in the paper published in ESWA 2021 . LARCC L aboratory of A utomation and R obotics C ollaborative C ell (LARCC) is included in a research project focusing of collaborative robotic industrial cells. The goal is to monitor in detail the volume of the cell in order to ensure safe collaboration between human operators and robots. For this, several sensors of different modalities are positioned everywhere in the cell, which makes the calibration of this robotic system a challenging task. The repostiories of LARCC are not publicly available. A photograph of LARCC. A 3D Model of the LARCC.. Sensor fields of view in LARCC. Calibration of LARCC.","title":"Calibration Examples"},{"location":"examples/#calibration-examples","text":"MMTBot Atlascar2 IrisUA - ur10e AgrobV2 LARCC ATOM provides extensive visualization possibilities while running the calibration optimization procedure. To visualize in ROS Rviz use the -rv flag. So far, we have used ATOM to successfully calibrate several robotic platforms. Here are some examples:","title":"Calibration Examples"},{"location":"examples/#mmtbot","text":"MMTBot is a simulated robotic system containing a manipulator, two rgb cameras and one 3D lidar, with the goal of reserching how ATOM can calibration hand-eye systems. The respositories for this system are here: https://github.com/miguelriemoliveira/mmtbot A 3D Model of the MMTBot.","title":"MMTBot"},{"location":"examples/#atlascar2","text":"The Atlascar2 is an intelligent vehicle containing several cameras and 2D Lidars. This was the first platform we have calibrated using ATOM. The repositories containing the atlascar packages are here: https://github.com/lardemua/atlascar2 A photograph of the AtlasCar2. A 3D model of the AtlasCar2. Further details on this system can be read in the papers published in ROBOT 2019 and RAS 2020 .","title":"Atlascar2"},{"location":"examples/#irisua-ur10e","text":"The IrisUA - ur10e includes several variants of the hand-eye calibration problem. The repositories containing the calibration ros package for this system are here: https://github.com/iris-ua/iris_ur10e_calibration A photograph of the IRIS UA UR10e. A 3D Model of the IRIS UA UR10e. Further details on this system can be read in the paper published in T-Ro 2021 .","title":"IrisUA - ur10e"},{"location":"examples/#agrobv2","text":"AgrobV2 is a mobile robot with a stereo camera and a 3D Lidar designed for agriculture robotics. https://github.com/aaguiar96/agrob A photograph of the AgrobV2. A 3D Model of the AgrobV2. Further details on this system can be read in the paper published in ESWA 2021 .","title":"AgrobV2"},{"location":"examples/#larcc","text":"L aboratory of A utomation and R obotics C ollaborative C ell (LARCC) is included in a research project focusing of collaborative robotic industrial cells. The goal is to monitor in detail the volume of the cell in order to ensure safe collaboration between human operators and robots. For this, several sensors of different modalities are positioned everywhere in the cell, which makes the calibration of this robotic system a challenging task. The repostiories of LARCC are not publicly available. A photograph of LARCC. A 3D Model of the LARCC.. Sensor fields of view in LARCC. Calibration of LARCC.","title":"LARCC"},{"location":"getting_started/","text":"Getting Started Getting Started Installation Calibration Patterns Basic Usage Create a calibration package Configure a calibration package Set initial estimate Collect Data Dataset playback Calibrate sensors Installation Clone the atom repository to a directory inside your catkin workspace: git clone https://github.com/lardemua/atom then install requirements. sudo pip3 install -r requirements.txt We often use two enviroment variables to allow for easy cross machine access to bagfiles and datasets. If you want to use these you can also add these lines to your .bashrc or .zhsrc , adjusting the paths according to your case: export ROS_BAGS=\"$HOME/<bagfiles\" export ATOM_DATASETS=\"$HOME/datasets\" and then you can refer to these environment variables when providing paths to atom scripts, e.g.: roslaunch <my_robot_calibration> calibrate.launch dataset_file:=$ATOM_DATASETS/<my_dataset>/dataset.json and you can also refer to them inside the calibration configuration file Calibration Patterns We recomend the usage RGB cameras have a fully automatic pattern detection. It uses off the shelf chessboard or charuco calibration pattern detectors. To calibrate our systems we purchased charuco calibration patterns from calib.io . Note Charuco boards are preferable to chessboard patterns, because of two main reasons: the first is that the charuco detection is more more efficient when compared to the chessboard detection; the second is that the charuco pattern is detected even if it is only partially visible in the image, which is very usefull when the sensors in your system have small overlapping fields of view. Basic Usage Unlike most other calibration approaches, ATOM offers tools to address the complete calibration pipeline. These are instructions for quick starting your robotic system calibration. If you need more details read through the detailed description below. Create a calibration package rosrun atom_calibration create_calibration_pkg --name <my_robot_calibration> Configure a calibration package Edit the file: <my_robot_calibration>/calibration/config.yml_ with your system information. and then run: rosrun <my_robot_calibration> configure Set initial estimate ATOM provides interactive tools based on rviz that allow the user to set the pose of the sensors to be calibrated, while receiving visual feedback. Optional If you consider that your initial sensor poses are already accurate, you may skip this procedure. To use launch: roslaunch <my_robot_calibration> set_initial_estimate.launch Collect Data Collecting data produces an ATOM dataset, which is then used for calibrating the system. roslaunch <my_robot_calibration> collect_data.launch output_folder:=~/datasets/<my_dataset> Dataset playback Dataset playback offers the possibility to visualize and correct the labels automatically produced during the collection stage. Optional If you trust that the automatic labels are correct, you may skip this procedure. First launch the visualizer: roslaunch <my_robot_calibration> dataset_playback.launch and then: rosrun atom_calibration dataset_playback -json $ATOM_DATASETS/<my_robot_calibration>/<your_dataset>/dataset.json -uic -si -ow Calibrate sensors Finally run an optimization that will calibrate your sensors: roslaunch <my_robot_calibration> dataset_playback.launch","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Getting Started Installation Calibration Patterns Basic Usage Create a calibration package Configure a calibration package Set initial estimate Collect Data Dataset playback Calibrate sensors","title":"Getting Started"},{"location":"getting_started/#installation","text":"Clone the atom repository to a directory inside your catkin workspace: git clone https://github.com/lardemua/atom then install requirements. sudo pip3 install -r requirements.txt We often use two enviroment variables to allow for easy cross machine access to bagfiles and datasets. If you want to use these you can also add these lines to your .bashrc or .zhsrc , adjusting the paths according to your case: export ROS_BAGS=\"$HOME/<bagfiles\" export ATOM_DATASETS=\"$HOME/datasets\" and then you can refer to these environment variables when providing paths to atom scripts, e.g.: roslaunch <my_robot_calibration> calibrate.launch dataset_file:=$ATOM_DATASETS/<my_dataset>/dataset.json and you can also refer to them inside the calibration configuration file","title":"Installation"},{"location":"getting_started/#calibration-patterns","text":"We recomend the usage RGB cameras have a fully automatic pattern detection. It uses off the shelf chessboard or charuco calibration pattern detectors. To calibrate our systems we purchased charuco calibration patterns from calib.io . Note Charuco boards are preferable to chessboard patterns, because of two main reasons: the first is that the charuco detection is more more efficient when compared to the chessboard detection; the second is that the charuco pattern is detected even if it is only partially visible in the image, which is very usefull when the sensors in your system have small overlapping fields of view.","title":"Calibration Patterns"},{"location":"getting_started/#basic-usage","text":"Unlike most other calibration approaches, ATOM offers tools to address the complete calibration pipeline. These are instructions for quick starting your robotic system calibration. If you need more details read through the detailed description below.","title":"Basic Usage"},{"location":"getting_started/#create-a-calibration-package","text":"rosrun atom_calibration create_calibration_pkg --name <my_robot_calibration>","title":"Create a calibration package"},{"location":"getting_started/#configure-a-calibration-package","text":"Edit the file: <my_robot_calibration>/calibration/config.yml_ with your system information. and then run: rosrun <my_robot_calibration> configure","title":"Configure a calibration package"},{"location":"getting_started/#set-initial-estimate","text":"ATOM provides interactive tools based on rviz that allow the user to set the pose of the sensors to be calibrated, while receiving visual feedback. Optional If you consider that your initial sensor poses are already accurate, you may skip this procedure. To use launch: roslaunch <my_robot_calibration> set_initial_estimate.launch","title":"Set initial estimate"},{"location":"getting_started/#collect-data","text":"Collecting data produces an ATOM dataset, which is then used for calibrating the system. roslaunch <my_robot_calibration> collect_data.launch output_folder:=~/datasets/<my_dataset>","title":"Collect Data"},{"location":"getting_started/#dataset-playback","text":"Dataset playback offers the possibility to visualize and correct the labels automatically produced during the collection stage. Optional If you trust that the automatic labels are correct, you may skip this procedure. First launch the visualizer: roslaunch <my_robot_calibration> dataset_playback.launch and then: rosrun atom_calibration dataset_playback -json $ATOM_DATASETS/<my_robot_calibration>/<your_dataset>/dataset.json -uic -si -ow","title":"Dataset playback"},{"location":"getting_started/#calibrate-sensors","text":"Finally run an optimization that will calibrate your sensors: roslaunch <my_robot_calibration> dataset_playback.launch","title":"Calibrate sensors"},{"location":"multimedia/","text":"Multimedia Take a look at the ATOM youtube playlist . v","title":"Multimedia"},{"location":"multimedia/#multimedia","text":"Take a look at the ATOM youtube playlist . v","title":"Multimedia"},{"location":"procedures/","text":"Calibration procedures Create a calibration package Configure a calibration package Set an initial estimate Visualizing sensor fustrums Collect data RGB camera labeling 3D Lidar labeling Depth camera labeling 2D Lidar labeling Dataset playback Calibrate Advanced usage - running calibration script in separate terminal Advanced usage - two stage calibration for robotic systems with an anchored sensor To calibrate your robot you must define your robotic system, (e.g. <my_robot>). You should also have a system description in the form of an urdf or a xacro file(s). This is normally stored in a ros package named <my_robot>_description . Note We recommend using xacro files instead of urdfs. Finally, ATOM requires a bagfile with a recording of the data from the sensors you wish to calibrate. Transformations in the bagfile (i.e. topics /tf and /tf_static) will be ignored, so that they do not collide with the ones being published by the robot_state_publisher . Thus, if your robotic system contains moving parts, the bagfile should also record the sensor_msgs/JointState message. Note It is also possible to use the transformations in the bagfile instead of using the xacro description and the robot state publisher to produce them. See section on configuring a calibration package . To reduce the bag size, it may contain compressed images instead of raw images, since ATOM can decompress them while playing back the bagfile. Here is an example of a launch file which records compressed images. We consider this to be part of the normal configuration of your robotic system in ROS, so ATOM assumes this is already done. In any case if you need inspiration you can take a look at the calibration examples and how we configured our systems. Create a calibration package Assuming you have your robotic system setup, you can start creating the calibration package. You should create a calibration ros package specific for your robotic system. ATOM provides a script for this: rosrun atom_calibration create_calibration_pkg --name <my_robot_calibration> This will create the ros package in the current folder, but you can also specify another folder, e.g.: rosrun atom_calibration create_calibration_pkg --name ~/my/path/<my_robot_calibration> Configure a calibration package Once your calibration package is created you will have to configure the calibration procedure by editing the /calibration/config.yml file with your system information. Here are examples of calibration config.yml files for an autonomous vehicle and for a simulated hand eye system . Also, the file contains several comments to provide clues on how to configure it. After filling the config.yml file, you should run the package configuration: rosrun <my_robot_calibration> configure This will go through a series of varifications, and create a set of files for launching the system, configuring rviz, etc. It is also possible to configure your calibration package with a different configuration file, in the case you have multiple configurations with multiple config.yml files. There are also other options to run a custom configuration, i.e.: usage: rosrun atom_calibration configure_calibration_pkg [-h] -n NAME [-utf] [-cfg CONFIG_FILE] -h, --help show this help message and exit -n NAME, --name NAME package name -utf, --use_tfs Use transformations in the bag file instead of generating new tfs from the xacro, joint_state_msgs and robot state publisher. -cfg CONFIG_FILE, --config_file CONFIG_FILE Specify if you want to configure the calibration package with a specific configutation file. If this flag is not given, the standard config.yml ill be used. Set an initial estimate Iterative optimization methods are often sensitive to the initial parameter configuration. There are several optimization parameters. However, the ones we refer to in this case are those that represent the poses of each sensor. ATOM provides an interactive framework based on rviz which allows the user to set the pose of the sensors while having immediate visual feedback. To set an initial estimate run: roslaunch <my_robot_calibration> set_initial_estimate.launch Here are a couple of examples of setting the initial estimate: Setting initial estimate of sensor poses in the AgrobV2. Setting initial estimate of sensor poses in the AtlasCar2. Setting initial estimate of sensor poses in the IRIS UR10e. Visualizing sensor fustrums ATOM provides a way to visualize the fustrums of RGB and Depth cameras. These may be useful to get a clue about the overlap between sensors, or the ammount of coverage of a work volume. Below you can see the fustrum of two rgb cameras. One of the cameras is positioned on the end-effector of the manipulator, and when it moves, so does its fustrum. Visualizing fustrum of RGB sensors in the MMTBot. Collect data To run a system calibration, one requires data from the sensors collected at different time instants. We refer to these snapshots of data as collections , and a set of collections as an ATOM dataset . To collect data, use: roslaunch <my_robot_calibration> collect_data.launch output_folder:=$ATOM_DATASETS/<your_dataset_folder> The script launches an rviz window already configured. The user observes the data playback and decides when a collection should be saved by clicking a green sphere in that appears in the scene. It is also possible to add additional parameters to configure several aspects of the script. See below all the options. Additional parameters for collect_data.launch Argument Function overwrite overwrites previous dataset without asking for confirmation bag_rate Defines the playback rate of the bagfile bag_start Start time for playback bag_file Name of bagfile to playback ssl A string to be evaluated that indicates if a sensor should be labelled. One example using all the parameters above: roslaunch <my_robot_calibration> collect_data.launch output_folder:=$ATOM_DATASETS/<your_dataset_folder> overwrite:=true bag_rate:=0.5 bag_start:=10 ssl:='lambda name: name in [\"s1\", \"s2\"]' When you launch the data collection script, it automatically starts data labeling processes adequate for each sensor in your robotic system. As such, the data is being continuously labeled as the bagfile is played. Depending on the modalidity of the sensors in the system the labeling may be automatic or fully automatic. Below we detail how each of the labelers operate. RGB camera labeling RGB cameras have a fully automatic pattern detection. It uses off the shelf chessboard or charuco calibration pattern detectors. ATOM provides an rviz configuration which subscribes annotated images received from the pattern detectors. You can check if the detection is working by observing the overlays of top of the images. Setting the seed point in 2D Lidar data for semi-automatic labeling (AtlasCar2). Note Charuco boards are preferable to chessboard patterns, because of two main reasons: the first is that the charuco detection is more more efficient when compared to the chessboard detection; the second is that the charuco pattern is detected even if it is only partially visible in the image, which is very usefull when the sensors in your system have small overlapping fields of view. 3D Lidar labeling 3D Lidar labeling is a semi-automatic procedure. The idea is that the user moves an rviz marker close to where the pattern is present in the lidar point cloud. Setting the seed point in 3D Lidar data for semi-automatic labeling (MMTBot). After setting this seed position, the system continues to track the patterns pose over the next frames, even if it moves, as you can see below: Automatic 3D Lidar labeling and creating an ATOM dataset (AgrobV2). Tracking limitations The tracking procedure may fail if the pattern is too close to another object, as for example the ground plane. This can be solved by making sure the pattern is sufficiently far from all other objects, or during the dataset playback stage. Depth camera labeling The labeling of depth cameras a semi-automatic procedure. It is done by clicking the depth image in rviz. The user should click somewhere inside the pattern, and then the system carries on the tracking of the pattern even if it moves. The user may reset the procedure by reclicking the image. Labeling of depth data (LARCC). RViz fork required This functionality is only available using a special RViz fork at: https://github.com/miguelriemoliveira/rviz which extends the image display to suport mouse clicking. We are working on integrating this in the RViz main branch, but this is not available yet. More information here: https://github.com/ros-visualization/rviz/issues/916 https://github.com/ros-visualization/rviz/pull/1737 2D Lidar labeling The labeling of the 2D Lidars is very similar to the labeling of 3D Lidars. The user sets the seed point where the lidar points are observing the pattern, and then the pattern is tracked. Setting the seed point in 2D Lidar data for semi-automatic labeling (AtlasCar2). May be deprecated The 2D Lidar semi-automatic labeling was last used in 2019, so it may be deprecated. If you are interested on having this functionality create an issue with a request. Dataset playback The dataset playback is used to review and eventually correct the automatic labels produced during the collection of data . Ideally, the bulk of the annotations should be correct, but a few incorrect labels will disruot the calibration. As such, a review of the annotations is recommended by default. To run the dataset playback, first launch the visualization: roslaunch <my_robot_calibration> dataset_playback.launch and then s clear && rosrun atom_calibration dataset_playback -json $ATOM_DATASETS/larcc/larcc_real/test_dataset/dataset_corrected.json -csf \"lambda x: int(x) <= 55\" -uic -si -ow RViz fork required This functionality is only available using a special RViz fork at: https://github.com/miguelriemoliveira/rviz which extends the image display to suport mouse clicking. We are working on integrating this in the RViz main branch, but this is not available yet. More information here: https://github.com/ros-visualization/rviz/issues/916 https://github.com/ros-visualization/rviz/pull/1737 Calibrate Finally, a system calibration is called through: roslaunch <my_robot_calibration> calibrate.launch dataset_file:=~/datasets/<my_dataset>/dataset.json You can use a couple of launch file arguments to configure the calibration procedure, as seen below: Additional parameters for calibrate.launch Argument Function use_incomplete_collections Remove collections which do not have a detection for all sensors ssf A string to be evaluated into a lambda function that receives a sensor name as input and returns True or False to indicate if the sensor should be used in the optimization csf A string to be evaluated into a lambda function that receives a collection name as input and returns True or False to indicate if that collection should be used in the optimization. One example using all the parameters above: roslaunch <my_robot_calibration> calibrate.launch dataset_file:=$ATOM_DATASETS/<my_dataset>/dataset.json use_incomplete_collections:=true ssf:='lambda name: name in [\"camera1, \"lidar2\"]' csf:='lambda name: int(name) < 7' Advanced usage - running calibration script in separate terminal Alternatively, for debugging the calibrate script it is better not to have it executed with a bunch of other scripts which is what happens when you call the launch file. You can run everything with the launch excluding without the calibrate script using the run_calibration:=false option, e.g.: roslaunch <my_robot_calibration> calibrate.launch dataset_file:=~/datasets/<my_dataset>/dataset.json run_calibration:=false and then launch the calibrate script in standalone mode: rosrun atom_calibration calibrate -json dataset_file:=~/datasets/<my_dataset>/dataset.json There are several additional command line arguments to use with the calibrate script, run calibrate --help to get the complete list: usage: calibrate [-h] [-sv SKIP_VERTICES] [-z Z_INCONSISTENCY_THRESHOLD] [-vpv] [-vo] -json JSON_FILE [-v] [-rv] [-si] [-oi] [-pof] [-sr SAMPLE_RESIDUALS] [-ss SAMPLE_SEED] [-od] [-fec] [-uic] [-rpd] [-ssf SENSOR_SELECTION_FUNCTION] [-csf COLLECTION_SELECTION_FUNCTION] optional arguments: -h, --help show this help message and exit -json JSON_FILE, --json_file JSON_FILE Json file containing input dataset. -vo, --view_optimization Displays generic total error and residuals graphs. -v, --verbose Be verbose -rv, --ros_visualization Publish ros visualization markers. -si, --show_images shows images for each camera -oi, --optimize_intrinsics Adds camera instrinsics and distortion to the optimization -sr SAMPLE_RESIDUALS, --sample_residuals SAMPLE_RESIDUALS Samples residuals -ss SAMPLE_SEED, --sample_seed SAMPLE_SEED Sampling seed -uic, --use_incomplete_collections Remove any collection which does not have a detection for all sensors. -rpd, --remove_partial_detections Remove detected labels which are only partial. Used or the Charuco. -ssf SENSOR_SELECTION_FUNCTION, --sensor_selection_function SENSOR_SELECTION_FUNCTION A string to be evaluated into a lambda function that receives a sensor name as input and returns True or False to indicate if the sensor should be loaded (and used in the optimization). The Syntax is lambda name: f(x), where f(x) is the function in python language. Example: lambda name: name in [\"left_laser\", \"frontal_camera\"] , to load only sensors left_laser and frontal_camera -csf COLLECTION_SELECTION_FUNCTION, --collection_selection_function COLLECTION_SELECTION_FUNCTION A string to be evaluated into a lambda function that receives a collection name as input and returns True or False to indicate if the collection should be loaded (and used in the optimization). The Syntax is lambda name: f(x), where f(x) is the function in python language. Example: lambda name: int(name) > 5 , to load only collections 6, 7, and onward. It is also possible to call some of these through the launch file. Check the launch file to see how. Advanced usage - two stage calibration for robotic systems with an anchored sensor When one sensor is set to be anchored in the calibration/config.yml file, i.e. this file for the AtlaCar2, we recommend a two stage procedure to achieve a more accurate calibration: First, run a calibration using parameter --only_anchored_sensor ( -oas ) which will exclude from the optimization all sensors which are not the anchored one. This optimization will position the patterns correctly w.r.t. the anchored sensor. For example: rosrun atom_calibration calibrate -json $ATOM_DATASETS/larcc_real/ dataset_train/dataset_corrected.json -uic -nig 0.0 0.0 -ipg -si -rv -v -oas The output is stored in the atom_calibration.json , which is used and the input for the second stage, where all sensors are used. In this second stage the poses of the patterns are frozen using the parameter --anchor_patterns ( -ap ). To avoid overwritting atom_calibration.json, you should also define the output json file ( -oj ). For example: rosrun atom_calibration calibrate -json $ATOM_DATASETS/larcc_real/ dataset_train/atom_calibration.json -uic -nig 0.0 0.0 -ipg -si -rv -v -ap -oj atom_anchored_calibration.json Calibration of AgrobV2.","title":"Calibration Procedures"},{"location":"procedures/#calibration-procedures","text":"Create a calibration package Configure a calibration package Set an initial estimate Visualizing sensor fustrums Collect data RGB camera labeling 3D Lidar labeling Depth camera labeling 2D Lidar labeling Dataset playback Calibrate Advanced usage - running calibration script in separate terminal Advanced usage - two stage calibration for robotic systems with an anchored sensor To calibrate your robot you must define your robotic system, (e.g. <my_robot>). You should also have a system description in the form of an urdf or a xacro file(s). This is normally stored in a ros package named <my_robot>_description . Note We recommend using xacro files instead of urdfs. Finally, ATOM requires a bagfile with a recording of the data from the sensors you wish to calibrate. Transformations in the bagfile (i.e. topics /tf and /tf_static) will be ignored, so that they do not collide with the ones being published by the robot_state_publisher . Thus, if your robotic system contains moving parts, the bagfile should also record the sensor_msgs/JointState message. Note It is also possible to use the transformations in the bagfile instead of using the xacro description and the robot state publisher to produce them. See section on configuring a calibration package . To reduce the bag size, it may contain compressed images instead of raw images, since ATOM can decompress them while playing back the bagfile. Here is an example of a launch file which records compressed images. We consider this to be part of the normal configuration of your robotic system in ROS, so ATOM assumes this is already done. In any case if you need inspiration you can take a look at the calibration examples and how we configured our systems.","title":"Calibration procedures"},{"location":"procedures/#create-a-calibration-package","text":"Assuming you have your robotic system setup, you can start creating the calibration package. You should create a calibration ros package specific for your robotic system. ATOM provides a script for this: rosrun atom_calibration create_calibration_pkg --name <my_robot_calibration> This will create the ros package in the current folder, but you can also specify another folder, e.g.: rosrun atom_calibration create_calibration_pkg --name ~/my/path/<my_robot_calibration>","title":"Create a calibration package"},{"location":"procedures/#configure-a-calibration-package","text":"Once your calibration package is created you will have to configure the calibration procedure by editing the /calibration/config.yml file with your system information. Here are examples of calibration config.yml files for an autonomous vehicle and for a simulated hand eye system . Also, the file contains several comments to provide clues on how to configure it. After filling the config.yml file, you should run the package configuration: rosrun <my_robot_calibration> configure This will go through a series of varifications, and create a set of files for launching the system, configuring rviz, etc. It is also possible to configure your calibration package with a different configuration file, in the case you have multiple configurations with multiple config.yml files. There are also other options to run a custom configuration, i.e.: usage: rosrun atom_calibration configure_calibration_pkg [-h] -n NAME [-utf] [-cfg CONFIG_FILE] -h, --help show this help message and exit -n NAME, --name NAME package name -utf, --use_tfs Use transformations in the bag file instead of generating new tfs from the xacro, joint_state_msgs and robot state publisher. -cfg CONFIG_FILE, --config_file CONFIG_FILE Specify if you want to configure the calibration package with a specific configutation file. If this flag is not given, the standard config.yml ill be used.","title":"Configure a calibration package"},{"location":"procedures/#set-an-initial-estimate","text":"Iterative optimization methods are often sensitive to the initial parameter configuration. There are several optimization parameters. However, the ones we refer to in this case are those that represent the poses of each sensor. ATOM provides an interactive framework based on rviz which allows the user to set the pose of the sensors while having immediate visual feedback. To set an initial estimate run: roslaunch <my_robot_calibration> set_initial_estimate.launch Here are a couple of examples of setting the initial estimate: Setting initial estimate of sensor poses in the AgrobV2. Setting initial estimate of sensor poses in the AtlasCar2. Setting initial estimate of sensor poses in the IRIS UR10e.","title":"Set an initial estimate"},{"location":"procedures/#visualizing-sensor-fustrums","text":"ATOM provides a way to visualize the fustrums of RGB and Depth cameras. These may be useful to get a clue about the overlap between sensors, or the ammount of coverage of a work volume. Below you can see the fustrum of two rgb cameras. One of the cameras is positioned on the end-effector of the manipulator, and when it moves, so does its fustrum. Visualizing fustrum of RGB sensors in the MMTBot.","title":"Visualizing sensor fustrums"},{"location":"procedures/#collect-data","text":"To run a system calibration, one requires data from the sensors collected at different time instants. We refer to these snapshots of data as collections , and a set of collections as an ATOM dataset . To collect data, use: roslaunch <my_robot_calibration> collect_data.launch output_folder:=$ATOM_DATASETS/<your_dataset_folder> The script launches an rviz window already configured. The user observes the data playback and decides when a collection should be saved by clicking a green sphere in that appears in the scene. It is also possible to add additional parameters to configure several aspects of the script. See below all the options. Additional parameters for collect_data.launch Argument Function overwrite overwrites previous dataset without asking for confirmation bag_rate Defines the playback rate of the bagfile bag_start Start time for playback bag_file Name of bagfile to playback ssl A string to be evaluated that indicates if a sensor should be labelled. One example using all the parameters above: roslaunch <my_robot_calibration> collect_data.launch output_folder:=$ATOM_DATASETS/<your_dataset_folder> overwrite:=true bag_rate:=0.5 bag_start:=10 ssl:='lambda name: name in [\"s1\", \"s2\"]' When you launch the data collection script, it automatically starts data labeling processes adequate for each sensor in your robotic system. As such, the data is being continuously labeled as the bagfile is played. Depending on the modalidity of the sensors in the system the labeling may be automatic or fully automatic. Below we detail how each of the labelers operate.","title":"Collect data"},{"location":"procedures/#rgb-camera-labeling","text":"RGB cameras have a fully automatic pattern detection. It uses off the shelf chessboard or charuco calibration pattern detectors. ATOM provides an rviz configuration which subscribes annotated images received from the pattern detectors. You can check if the detection is working by observing the overlays of top of the images. Setting the seed point in 2D Lidar data for semi-automatic labeling (AtlasCar2). Note Charuco boards are preferable to chessboard patterns, because of two main reasons: the first is that the charuco detection is more more efficient when compared to the chessboard detection; the second is that the charuco pattern is detected even if it is only partially visible in the image, which is very usefull when the sensors in your system have small overlapping fields of view.","title":"RGB camera labeling"},{"location":"procedures/#3d-lidar-labeling","text":"3D Lidar labeling is a semi-automatic procedure. The idea is that the user moves an rviz marker close to where the pattern is present in the lidar point cloud. Setting the seed point in 3D Lidar data for semi-automatic labeling (MMTBot). After setting this seed position, the system continues to track the patterns pose over the next frames, even if it moves, as you can see below: Automatic 3D Lidar labeling and creating an ATOM dataset (AgrobV2). Tracking limitations The tracking procedure may fail if the pattern is too close to another object, as for example the ground plane. This can be solved by making sure the pattern is sufficiently far from all other objects, or during the dataset playback stage.","title":"3D Lidar labeling"},{"location":"procedures/#depth-camera-labeling","text":"The labeling of depth cameras a semi-automatic procedure. It is done by clicking the depth image in rviz. The user should click somewhere inside the pattern, and then the system carries on the tracking of the pattern even if it moves. The user may reset the procedure by reclicking the image. Labeling of depth data (LARCC). RViz fork required This functionality is only available using a special RViz fork at: https://github.com/miguelriemoliveira/rviz which extends the image display to suport mouse clicking. We are working on integrating this in the RViz main branch, but this is not available yet. More information here: https://github.com/ros-visualization/rviz/issues/916 https://github.com/ros-visualization/rviz/pull/1737","title":"Depth camera labeling"},{"location":"procedures/#2d-lidar-labeling","text":"The labeling of the 2D Lidars is very similar to the labeling of 3D Lidars. The user sets the seed point where the lidar points are observing the pattern, and then the pattern is tracked. Setting the seed point in 2D Lidar data for semi-automatic labeling (AtlasCar2). May be deprecated The 2D Lidar semi-automatic labeling was last used in 2019, so it may be deprecated. If you are interested on having this functionality create an issue with a request.","title":"2D Lidar labeling"},{"location":"procedures/#dataset-playback","text":"The dataset playback is used to review and eventually correct the automatic labels produced during the collection of data . Ideally, the bulk of the annotations should be correct, but a few incorrect labels will disruot the calibration. As such, a review of the annotations is recommended by default. To run the dataset playback, first launch the visualization: roslaunch <my_robot_calibration> dataset_playback.launch and then s clear && rosrun atom_calibration dataset_playback -json $ATOM_DATASETS/larcc/larcc_real/test_dataset/dataset_corrected.json -csf \"lambda x: int(x) <= 55\" -uic -si -ow RViz fork required This functionality is only available using a special RViz fork at: https://github.com/miguelriemoliveira/rviz which extends the image display to suport mouse clicking. We are working on integrating this in the RViz main branch, but this is not available yet. More information here: https://github.com/ros-visualization/rviz/issues/916 https://github.com/ros-visualization/rviz/pull/1737","title":"Dataset playback"},{"location":"procedures/#calibrate","text":"Finally, a system calibration is called through: roslaunch <my_robot_calibration> calibrate.launch dataset_file:=~/datasets/<my_dataset>/dataset.json You can use a couple of launch file arguments to configure the calibration procedure, as seen below: Additional parameters for calibrate.launch Argument Function use_incomplete_collections Remove collections which do not have a detection for all sensors ssf A string to be evaluated into a lambda function that receives a sensor name as input and returns True or False to indicate if the sensor should be used in the optimization csf A string to be evaluated into a lambda function that receives a collection name as input and returns True or False to indicate if that collection should be used in the optimization. One example using all the parameters above: roslaunch <my_robot_calibration> calibrate.launch dataset_file:=$ATOM_DATASETS/<my_dataset>/dataset.json use_incomplete_collections:=true ssf:='lambda name: name in [\"camera1, \"lidar2\"]' csf:='lambda name: int(name) < 7'","title":"Calibrate"},{"location":"procedures/#advanced-usage-running-calibration-script-in-separate-terminal","text":"Alternatively, for debugging the calibrate script it is better not to have it executed with a bunch of other scripts which is what happens when you call the launch file. You can run everything with the launch excluding without the calibrate script using the run_calibration:=false option, e.g.: roslaunch <my_robot_calibration> calibrate.launch dataset_file:=~/datasets/<my_dataset>/dataset.json run_calibration:=false and then launch the calibrate script in standalone mode: rosrun atom_calibration calibrate -json dataset_file:=~/datasets/<my_dataset>/dataset.json There are several additional command line arguments to use with the calibrate script, run calibrate --help to get the complete list: usage: calibrate [-h] [-sv SKIP_VERTICES] [-z Z_INCONSISTENCY_THRESHOLD] [-vpv] [-vo] -json JSON_FILE [-v] [-rv] [-si] [-oi] [-pof] [-sr SAMPLE_RESIDUALS] [-ss SAMPLE_SEED] [-od] [-fec] [-uic] [-rpd] [-ssf SENSOR_SELECTION_FUNCTION] [-csf COLLECTION_SELECTION_FUNCTION] optional arguments: -h, --help show this help message and exit -json JSON_FILE, --json_file JSON_FILE Json file containing input dataset. -vo, --view_optimization Displays generic total error and residuals graphs. -v, --verbose Be verbose -rv, --ros_visualization Publish ros visualization markers. -si, --show_images shows images for each camera -oi, --optimize_intrinsics Adds camera instrinsics and distortion to the optimization -sr SAMPLE_RESIDUALS, --sample_residuals SAMPLE_RESIDUALS Samples residuals -ss SAMPLE_SEED, --sample_seed SAMPLE_SEED Sampling seed -uic, --use_incomplete_collections Remove any collection which does not have a detection for all sensors. -rpd, --remove_partial_detections Remove detected labels which are only partial. Used or the Charuco. -ssf SENSOR_SELECTION_FUNCTION, --sensor_selection_function SENSOR_SELECTION_FUNCTION A string to be evaluated into a lambda function that receives a sensor name as input and returns True or False to indicate if the sensor should be loaded (and used in the optimization). The Syntax is lambda name: f(x), where f(x) is the function in python language. Example: lambda name: name in [\"left_laser\", \"frontal_camera\"] , to load only sensors left_laser and frontal_camera -csf COLLECTION_SELECTION_FUNCTION, --collection_selection_function COLLECTION_SELECTION_FUNCTION A string to be evaluated into a lambda function that receives a collection name as input and returns True or False to indicate if the collection should be loaded (and used in the optimization). The Syntax is lambda name: f(x), where f(x) is the function in python language. Example: lambda name: int(name) > 5 , to load only collections 6, 7, and onward. It is also possible to call some of these through the launch file. Check the launch file to see how.","title":"Advanced usage - running calibration script in separate terminal"},{"location":"procedures/#advanced-usage-two-stage-calibration-for-robotic-systems-with-an-anchored-sensor","text":"When one sensor is set to be anchored in the calibration/config.yml file, i.e. this file for the AtlaCar2, we recommend a two stage procedure to achieve a more accurate calibration: First, run a calibration using parameter --only_anchored_sensor ( -oas ) which will exclude from the optimization all sensors which are not the anchored one. This optimization will position the patterns correctly w.r.t. the anchored sensor. For example: rosrun atom_calibration calibrate -json $ATOM_DATASETS/larcc_real/ dataset_train/dataset_corrected.json -uic -nig 0.0 0.0 -ipg -si -rv -v -oas The output is stored in the atom_calibration.json , which is used and the input for the second stage, where all sensors are used. In this second stage the poses of the patterns are frozen using the parameter --anchor_patterns ( -ap ). To avoid overwritting atom_calibration.json, you should also define the output json file ( -oj ). For example: rosrun atom_calibration calibrate -json $ATOM_DATASETS/larcc_real/ dataset_train/atom_calibration.json -uic -nig 0.0 0.0 -ipg -si -rv -v -ap -oj atom_anchored_calibration.json Calibration of AgrobV2.","title":"Advanced usage - two stage calibration for robotic systems with an anchored sensor"}]}